#ifndef STOCKANALYTOR_HPP
#define STOCKANALYTOR_HPP

#include <string>
#include <vector>

class StockAnalytor {
private:
    std::vector<std::pair<std::string, double>> data; // Дата и цена

    bool parseLine(const std::string& line, std::string& date, double& price);
    double calculateMean() const;

public:
    bool loadData(const std::string& filename); // Загрузка данных из файла

    double getMeanPrice() const;                // Средняя цена
    double getStandardDeviation() const;        // Стандартное отклонение
    std::pair<std::string, double> getMaxPriceDay() const;  // День с максимальной ценой
    std::pair<std::string, double> getMinPriceDay() const;  // День с минимальной ценой
};

#endif // STOCKANALYTOR_HPP
#include "StockAnalytor.hpp"
#include <iostream>
#include <fstream>
#include <string>
#include <cmath> // Для sqrt (разрешено, т.к. это часть стандартной библиотеки C++)

bool StockAnalytor::parseLine(const std::string& line, std::string& date, double& price) {
    size_t commaPos = line.find(',');
    if (commaPos == std::string::npos) {
        return false;
    }

    date = line.substr(0, commaPos);
    std::string priceStr = line.substr(commaPos + 1);

    try {
        price = std::stod(priceStr); // Парсим цену
    } catch (...) {
        return false;
    }

    return true;
}

bool StockAnalytor::loadData(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Ошибка: не удалось открыть файл " << filename << std::endl;
        return false;
    }

    std::string line;
    while (std::getline(file, line)) {
        std::string date;
        double price;

        if (parseLine(line, date, price)) {
            data.emplace_back(date, price);
        } else {
            std::cerr << "Ошибка парсинга строки: " << line << std::endl;
        }
    }

    file.close();
    return !data.empty();
}

double StockAnalytor::calculateMean() const {
    if (data.empty()) {
        return 0.0;
    }

    double sum = 0.0;
    for (const auto& entry : data) {
        sum += entry.second;
    }

    return sum / data.size();
}

double StockAnalytor::getMeanPrice() const {
    return calculateMean();
}

double StockAnalytor::getStandardDeviation() const {
    if (data.empty()) {
        return 0.0;
    }

    double mean = calculateMean();
    double sumSquaredDiffs = 0.0;

    for (const auto& entry : data) {
        double diff = entry.second - mean;
        sumSquaredDiffs += diff * diff;
    }

    double variance = sumSquaredDiffs / data.size();
    return std::sqrt(variance); // Используем стандартный sqrt
}

std::pair<std::string, double> StockAnalytor::getMaxPriceDay() const {
    if (data.empty()) {
        return {"", 0.0};
    }

    auto maxEntry = data[0];
    for (const auto& entry : data) {
        if (entry.second > maxEntry.second) {
            maxEntry = entry;
        }
    }

    return maxEntry;
}

std::pair<std::string, double> StockAnalytor::getMinPriceDay() const {
    if (data.empty()) {
        return {"", 0.0};
    }

    auto minEntry = data[0];
    for (const auto& entry : data) {
        if (entry.second < minEntry.second) {
            minEntry = entry;
        }
    }

    return minEntry;
}
#include "StockAnalytor.hpp"
#include <iostream>

int main() {
    StockAnalytor analyzer;

    if (analyzer.loadData("prices.csv")) {
        std::cout << "Средняя цена: " << analyzer.getMeanPrice() << std::endl;
        std::cout << "Стандартное отклонение: " << analyzer.getStandardDeviation() << std::endl;

        auto maxDay = analyzer.getMaxPriceDay();
        std::cout << "Максимальная цена: " << maxDay.second << " (дата: " << maxDay.first << ")" << std::endl;

        auto minDay = analyzer.getMinPriceDay();
        std::cout << "Минимальная цена: " << minDay.second << " (дата: " << minDay.first << ")" << std::endl;
    } else {
        std::cerr << "Не удалось загрузить данные." << std::endl;
    }

    return 0;
}